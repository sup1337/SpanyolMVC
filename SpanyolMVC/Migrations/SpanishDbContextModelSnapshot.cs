// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpanyolMVC.Data;

#nullable disable

namespace SpanyolMVC.Migrations
{
    [DbContext(typeof(SpanishDbContext))]
    partial class SpanishDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SpanyolMVC.Models.Domain.QuizResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Infinitive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIrregular")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReflexive")
                        .HasColumnType("bit");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("SpanyolMVC.Models.Domain.Words", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conditional1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditional2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditional3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditional4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditional5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditional6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("English")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("French")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Future6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("German")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gerund")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Hungarian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativeNegative2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativeNegative3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativeNegative4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativeNegative5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativeNegative6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativePositive2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativePositive3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativePositive4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativePositive5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImperativePositive6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imperfect6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Indefinite6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Infinitive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Italian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Present6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctiveImperfect6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjunctivePresent6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
