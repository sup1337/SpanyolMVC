@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SpanyolMVC.Models.Domain
@model List<SpanyolMVC.Models.Domain.Words>
@{
    ViewData["Title"] = "Spanish Vocabulary";
    var selectedLanguage = ViewBag.SelectedLanguage as string ?? "english";
    var selectedDifficulty = ViewBag.SelectedDifficulty as int?;
    var selectedGroup = ViewBag.SelectedGroup as int?;
}

<div class="container mt-4">
    <div class="row mb-5 g-3">
        <div class="col-md-3">
            <select id="groupFilter" class="form-select">
                <option value="">All Verbs</option>
                <option value="0" selected="@(ViewBag.SelectedGroup == 0)">Regular</option>
                <option value="1" selected="@(ViewBag.SelectedGroup == 1)">Irregular</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="languageFilter" class="form-select">
                <option value="hungarian" selected="@(selectedLanguage == "hungarian")">Hungarian</option>
                <option value="english" selected="@(selectedLanguage == "english")">English</option>
                <option value="german" selected="@(selectedLanguage == "german")">German</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="tenseFilter" class="form-select">
                <option value="Present">Present</option>
                <option value="Past">Past</option>
                <option value="Future">Future</option>
                <option value="Conditional">Conditional</option>
                <option value="SubjunctivePresent">Subjunctive Present</option>
                <option value="SubjunctiveImperfect">Subjunctive Imperfect</option>
                <option value="ImperativePositive">Imperative Positive</option>
                <option value="ImperativeNegative">Imperative Negative</option>
            </select>
        </div>
        <div class="col-md-3">
            <button onclick="location.reload()" class="btn btn-outline-dark w-100">
                <i class="bi bi-arrow-clockwise"></i> Reset
            </button>
        </div>
    </div>

    <div class="kartyak row row-cols-1 row-cols-md-2 row-cols-lg-3 g-5">
        @foreach (var word in Model)
        {
            <div class="col">
                <div class="card h-100 verb-card" data-word-id="@word.Id">
                    <div class="card-inner">
                        <div class="card-front card-body d-flex flex-column justify-content-center align-items-center">
                            <h5 class="card-title">@word.Infinitive</h5>
                            @if (word.Infinitive.EndsWith("se"))
                            {
                                <span class="badge bg-warning">Reflexive</span>
                            }
                            <p class="mt-3">@GetTranslation(word, selectedLanguage)</p>
                            <small class="text-muted">Click to flip</small>
                        </div>
                        <div class="card-back card-body d-flex flex-column justify-content-center align-items-center">
                            <h6 class="text-muted mb-3">Conjugations (<span id="selected-tense">Present</span>)</h6>
                            <div class="row small text-center">
                                <div class="col-6">yo</div>
                                <div class="col-6">@word.Present1</div>
                                <div class="col-6">tú</div>
                                <div class="col-6">@word.Present2</div>
                                <div class="col-6">él/ella</div>
                                <div class="col-6">@word.Present3</div>
                                <div class="col-6">nosotros</div>
                                <div class="col-6">@word.Present4</div>
                                <div class="col-6">vosotros</div>
                                <div class="col-6">@word.Present5</div>
                                <div class="col-6">ellos/ellas</div>
                                <div class="col-6">@word.Present6</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="d-flex justify-content-between mt-4">
        @if (ViewBag.CurrentPage > 1)
        {
            <a href="@Url.Action("Vocabulary", new { group = ViewBag.SelectedGroup, language = ViewBag.SelectedLanguage, page = ViewBag.CurrentPage - 1 })" class="btn btn-outline-primary">Previous</a>
        }

        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
        {
            <a href="@Url.Action("Vocabulary", new { group = ViewBag.SelectedGroup, language = ViewBag.SelectedLanguage, page = ViewBag.CurrentPage + 1 })" class="btn btn-outline-primary">Next</a>
        }
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle card flipping
            $(".verb-card").on("click", function () {
                $(this).toggleClass("flipped");
            });

            // Handle filter changes
            $("#groupFilter, #languageFilter, #tenseFilter").on("change", function () {
                const group = $("#groupFilter").val();
                const language = $("#languageFilter").val();
                const tense = $("#tenseFilter").val();
                const params = new URLSearchParams({ group, language, tense });

                window.location.href = `/Home/Vocabulary?${params.toString()}`;
            });

            // Handle tense selection
            $("#tenseFilter").on("change", function () {
                const selectedTense = $(this).val();
                $("#selected-tense").text(selectedTense);

                $(".conjugation-person").each(function () {
                    const person = $(this).data("person");
                    const wordId = $(this).closest(".verb-card").data("word-id");
                    
                    const conjugation = getConjugation(wordId, selectedTense, person);
                    $(this).text(conjugation);
                });
            });

            // Mock function to get conjugation (replace with actual logic)
            function getConjugation(wordId, tense, person) {
                // Example logic: Replace with server-side or preloaded data
                return `Mock-${tense}-${person}`;
            }
        });
    </script>
}

@functions {
    private string GetTranslation(Words word, string language)
    {
        return language?.ToLower() switch
        {
            "hungarian" => word.Hungarian,
            "german" => word.German,
            _ => word.English // Default to English
        };
    }
}